// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/events/interfaces.go

// Package mock_events is a generated GoMock package.
package mock_events

import (
	context "context"
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
	 "github.com/mrangelba/go-toolkit/events/event_dispatcher"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockEventHandler) Handle(ctx context.Context, payload interface{}, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", ctx, payload, wg)
}

// Handle indicates an expected call of Handle.
func (mr *MockEventHandlerMockRecorder) Handle(ctx, payload, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandler)(nil).Handle), ctx, payload, wg)
}

// MockDispatcher is a mock of Dispatcher interface.
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher.
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance.
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockDispatcher) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockDispatcherMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockDispatcher)(nil).Clear))
}

// Dispatch mocks base method.
func (m *MockDispatcher) Dispatch(ctx context.Context, event string, payload interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", ctx, event, payload)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockDispatcherMockRecorder) Dispatch(ctx, event, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockDispatcher)(nil).Dispatch), ctx, event, payload)
}

// Has mocks base method.
func (m *MockDispatcher) Has(eventName string, handler dispatcher.EventHandler) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", eventName, handler)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockDispatcherMockRecorder) Has(eventName, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockDispatcher)(nil).Has), eventName, handler)
}

// Register mocks base method.
func (m *MockDispatcher) Register(eventName string, handler dispatcher.EventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", eventName, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockDispatcherMockRecorder) Register(eventName, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDispatcher)(nil).Register), eventName, handler)
}

// Remove mocks base method.
func (m *MockDispatcher) Remove(eventName string, handler dispatcher.EventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", eventName, handler)
}

// Remove indicates an expected call of Remove.
func (mr *MockDispatcherMockRecorder) Remove(eventName, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDispatcher)(nil).Remove), eventName, handler)
}
